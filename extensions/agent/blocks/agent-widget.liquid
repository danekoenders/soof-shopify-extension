<laintern-agent-widget data-laintern-agent-type="widget"></laintern-agent-widget>

<script type="module" defer>
  class AgentWidget extends HTMLElement {
  constructor() {
    super();
    
    // Check if embedded version exists on page - if so, don't render widget
    if (document.querySelector('[data-laintern-agent-type="embedded"]')) {
      console.log('Laintern Agent embedded detected - widget will not render');
      return;
    }
    
    // Mark that widget is present on the page
    window.__lainternAgentWidgetPresent = true;
    
    this.attachShadow({ mode: 'open' });
    this.isOpen = false;
    this.bundleLoaded = false;
    this.reactMount = null;
    this.button = null;
    this.window = null;
    this.handleButtonClick = this.handleButtonClick.bind(this);
    this.handleCloseClick = this.handleCloseClick.bind(this);
    
    // Configuration object for the chatbot - dynamic via Liquid
    this.config = {
      type: 'widget',
      agentName: {{ block.settings.agent_name | default: 'Soof' | json }},
      language: `{{ localization.language.iso_code }}` || 'en',
      primaryColor: {{ block.settings.primary_color | default: '#0040c0' | json }},
      showWelcomeMessage: {{ block.settings.show_welcome_message | default: true | json }}
    };
    
    // Ensure fonts used by the widget are available on the host page
    this.ensureFonts();

    this.renderBase();
  }

  loadBundle() {
    if (this.bundleLoaded) return Promise.resolve();
    this.bundleLoaded = true;
    return new Promise((resolve, reject) => {
      const script = document.createElement('script');
      script.src = `{{ 'lt-agent-extension.js' | asset_url }}`;
      script.type = 'module';
      script.defer = true;
      script.onload = () => resolve();
      script.onerror = (err) => reject(err);
      document.head.appendChild(script);
    });
  }

  ensureFonts() {
    // Inject Google Fonts stylesheet once per page (safe for Shadow DOM)
    if (!document.head.querySelector('link[data-laintern-agent-roboto]')) {
      const link = document.createElement('link');
      link.rel = 'stylesheet';
      link.href = 'https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap';
      link.setAttribute('data-laintern-agent-roboto', '');
      document.head.appendChild(link);
    }
  }

  // URL parameter management
  hasAgentOpenParam() {
    const params = new URLSearchParams(window.location.search);
    return params.has('_agentOpen');
  }

  addAgentOpenParam() {
    const url = new URL(window.location.href);
    if (!url.searchParams.has('_agentOpen')) {
      url.searchParams.set('_agentOpen', '');
      window.history.pushState({}, '', url.toString());
    }
  }

  removeAgentOpenParam() {
    const url = new URL(window.location.href);
    if (url.searchParams.has('_agentOpen')) {
      url.searchParams.delete('_agentOpen');
      window.history.pushState({}, '', url.toString());
    }
  }

  handleButtonClick() {
    if (!this.isOpen) {
      this.openChatWindow();
    }
  }

  handleCloseClick() {
    this.closeChatWindow();
  }

  async openChatWindow() {
    if (!this.isOpen) {
      // Fonts might not be ready on first open; ensure again before mount
      this.ensureFonts();
      await this.loadBundle();
      this.isOpen = true;
      
      // Add URL parameter to indicate chat is open
      this.addAgentOpenParam();
      
      this.renderBase();

      // Now that renderBase has placed <div id="laintern-agent-react-root">
      if (window.__lainternAgentMount) {
        window.__lainternAgentMount(this.shadowRoot, this.config);
      }
    }
  }

  closeChatWindow() {
    if (this.isOpen) {
      this.isOpen = false;
      
      // Remove URL parameter when chat closes
      this.removeAgentOpenParam();
      
      this.renderBase();
    }
  }

  renderBase() {
    // Clear shadow DOM
    this.shadowRoot.innerHTML = '';
    // Styles for button and window
      const style = document.createElement('style');
    style.textContent = `
      .laintern-agent-btn {
        position: fixed;
        bottom: 32px;
        right: 32px;
        z-index: 999999;
        background: #fff;
        border-radius: 50%;
        width: 64px;
        height: 64px;
        box-shadow: 0 2px 16px rgba(0,0,0,0.18);
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        border: none;
        transition: box-shadow 0.2s;
      }
      .laintern-agent-btn:hover {
        box-shadow: 0 4px 24px rgba(0,0,0,0.22);
      }
      .laintern-agent-window {
        position: fixed;
        bottom: 112px;
        right: 32px;
        max-width: 95vw;
        max-height: 80vh;
        background: #fff;
        border-radius: 16px;
        box-shadow: 0 4px 32px rgba(0,0,0,0.22);
        z-index: 9999999;
        display: flex;
        flex-direction: column;
        overflow: hidden;
        animation: laintern-agent-fade-in 0.2s;
      }
      .laintern-agent-close {
        position: absolute;
        top: 12px;
        right: 12px;
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
        z-index: 2;
      }
      #laintern-agent-react-root {
        flex: 1;
        width: 100%;
        height: 100%;
        overflow: auto;
      }
      @keyframes laintern-agent-fade-in {
        from { opacity: 0; transform: translateY(40px); }
        to { opacity: 1; transform: translateY(0); }
      }
      @media (max-width: 600px) {
        .laintern-agent-window {
          width: 100vw;
          height: 100vh;
          bottom: 0;
          right: 0;
          border-radius: 0;
        }
        .laintern-agent-btn {
          right: 16px;
          bottom: 16px;
        }
      }
    `;
    this.shadowRoot.appendChild(style);

    // Chat button
    if (!this.isOpen) {
      this.button = document.createElement('button');
      this.button.className = 'laintern-agent-btn';
      this.button.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="32" height="32"><path d="M2 15V5c0-1.1.9-2 2-2h16a2 2 0 0 1 2 2v15a1 1 0 0 1-1.7.7L16.58 17H4a2 2 0 0 1-2-2z"/><path d="M6 7h12a1 1 0 0 1 0 2H6a1 1 0 1 1 0-2zm0 4h8a1 1 0 0 1 0 2H6a1 1 0 0 1 0-2z"/></svg>`;
      this.button.addEventListener('click', this.handleButtonClick);
      this.shadowRoot.appendChild(this.button);
    } else {
      // Chat window
      this.window = document.createElement('div');
      this.window.className = 'laintern-agent-window';
      // Close button
      const closeBtn = document.createElement('button');
      closeBtn.className = 'laintern-agent-close';
      closeBtn.innerHTML = '&times;';
      closeBtn.addEventListener('click', this.handleCloseClick);
      this.window.appendChild(closeBtn);
      // React mount point
      this.reactMount = document.createElement('div');
      this.reactMount.id = 'laintern-agent-react-root';
      this.window.appendChild(this.reactMount);
      this.shadowRoot.appendChild(this.window);
    }
  }

  // Check for _agentOpen parameter on page load
  connectedCallback() {
    // If widget didn't initialize (embedded version present), skip
    if (!this.shadowRoot) return;
    
    // If URL contains _agentOpen parameter, auto-open the chat
    if (this.hasAgentOpenParam()) {
      // Delay slightly to ensure everything is initialized
      setTimeout(() => {
        this.openChatWindow();
      }, 100);
    }
  }
  }

  if (!customElements.get('laintern-agent-widget')) {
  customElements.define('laintern-agent-widget', AgentWidget);
  }

  // Expose global function to open the chat widget
  window._openAgentWidget = function() {
    // Check for widget version first
    const widgetElement = document.querySelector('[data-laintern-agent-type="widget"]');
    if (widgetElement && widgetElement.shadowRoot) {
      widgetElement.openChatWindow();
      return;
    }
    
    // Check for embedded version
    const embeddedElement = document.querySelector('[data-laintern-agent-type="embedded"]');
    if (embeddedElement) {
      console.log('Embedded chat is already visible on page');
      // Optional: scroll to embedded chat
      embeddedElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
      return;
    }
    
    console.warn('Laintern Agent not found on page');
  };

  // Also expose a close function for convenience
  window._closeAgentWidget = function() {
    const widgetElement = document.querySelector('[data-laintern-agent-type="widget"]');
    if (widgetElement && widgetElement.shadowRoot) {
      widgetElement.closeChatWindow();
    } else {
      console.log('Widget chat cannot be closed (embedded version or not found)');
    }
  };

  // Expose a toggle function
  window._toggleAgentWidget = function() {
    const widgetElement = document.querySelector('[data-laintern-agent-type="widget"]');
    if (widgetElement && widgetElement.shadowRoot) {
      if (widgetElement.isOpen) {
        widgetElement.closeChatWindow();
      } else {
        widgetElement.openChatWindow();
      }
    } else {
      // If no widget, try to open (which will handle embedded case)
      window._openAgentWidget();
    }
  };
</script>

{% schema %}
  {
    "name": "Laintern Agent (Widget)",
    "target": "body",
    "settings": [
      {
        "type": "text",
        "id": "agent_name",
        "label": "Agent Name",
        "default": "Soof",
        "info": "The name of your virtual assistant"
      }, {
        "type": "color",
        "id": "primary_color",
        "label": "Primary Color",
        "default": "#0040c0",
        "info": "The main color for the chat widget"
      }, {
        "type": "checkbox",
        "id": "show_welcome_message",
        "label": "Show Welcome Message",
        "default": true,
        "info": "Display welcome message when chat opens"
      }
    ]
  }
{% endschema %}